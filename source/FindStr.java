// Identify substructures in whole genome structure prediction
// 30 September 2018
// Tiana Schwab

/*	input: supply a string of a structure in dotbracket notation (FindStr.subdivide (String structure))
	output: ArrayList<Duo> of positions of substructures in the structure 

	convertToGapped (ArrayList<Duo> structure_bounds, ArrayList<Integer> alignment_pos): converts structure positions to the positions in the alignment
*/
import java.util.*;

public class FindStr {
	
	public static int findClose (String structure, int open) {
	// adapted from https://stackoverflow.com/questions/12752225/how-do-i-find-the-position-of-matching-parentheses-or-braces-in-a-given-piece-of
		char[] st = structure.toCharArray ();
		int close =open;
		int counter = 1;
		while (counter > 0) {
			char c = st[++close];
			if (c=='('){
				counter++;
			}
			else if (c==')') {
				counter--;
			}
		}
		return close;
		//Duo ans = new Duo (open, close);
		//return ans;
	}
	
	public static int findOpen (String structure, int close) {
	// adapted from https://stackoverflow.com/questions/12752225/how-do-i-find-the-position-of-matching-parentheses-or-braces-in-a-given-piece-of
		char[] st = structure.toCharArray ();
		int open = close;
		int counter = 1;
		while (counter > 0) {
			char c = st[--open];
			if (c=='('){
				counter--;
			}
			else if (c==')') {
				counter++;
			}
		}
		return open;
		//Duo ans = new Duo (open, close);
		//return ans;
	}
	
	public static ArrayList<Duo> subdivide (String struc ) {
	// subdivide eachtime already or only after a certain limit?
		Stack stack = new Stack ();
		boolean lever = false;
		boolean lever_sub = false;
		int position = -1;
		
		Set<Duo> structure_bounds_set = new HashSet<Duo> ();
		int previous = 0;
		for (char c : struc.toCharArray ()){
			position++;
			int site = 0;
			if (c == '(' && !lever) {
			// start of a new structure
				lever = true;
				stack.push (position);
				//System.out.println ("First Push: "+position);
			}
			else if (c == '(' && lever) {
				if (!lever_sub) {
					stack.push (position);
					//System.out.println ("Push: "+position)
				}
				else {
					//System.out.println ("Substructure starts here: "+position);
					//System.out.println (previous);
					stack.push (position);
					lever_sub = false;
					structure_bounds_set.add (new Duo (findOpen (struc,previous), previous));
					structure_bounds_set.add (new Duo (position, findClose (struc,position)));
				}
			}
			else if (c == ')') {
				site = stack.pop ();
				lever_sub = true;
				previous = position; //rename to previous
				//System.out.println (previous+"  Pos:"+position);
				//System.out.println ("Pop: "+site);
			}
			if (stack.isEmpty () && lever) {
			// end of a structure
				structure_bounds_set.add (new Duo(site, position));
				//previous = 0;
				lever = false;
				lever_sub = false;
			}
		}
		ArrayList<Duo> structure_bounds = new ArrayList<Duo> (structure_bounds_set.size());
		for (Duo d : structure_bounds_set) {
			structure_bounds.add (d);
		}
		//Object[] structure_bounds = structure_bounds_set.toArray();
		return structure_bounds;
	}
	
	public static ArrayList<Duo> convertToGapped (ArrayList<Duo> structure_bounds, ArrayList<Integer> alignment_pos) {
		ArrayList<Duo> alignment_bounds = new ArrayList<Duo> ();
		for (Duo nogaps : structure_bounds) {
			int open = alignment_pos.get(nogaps.getOpen());
			int close = alignment_pos.get(nogaps.getClose());
			Duo withgaps = new Duo (open, close);
			alignment_bounds.add (withgaps);
		}
		return alignment_bounds;
	}

	public static void main (String[] args) {
		
		//String struc =    "...(((......)))..(((......)))..((((((....))).....(((......)))(((......)))))).....(((((.....)))))...";
		String struc = "((((((((((....))))))...((((((((...((((.(((((.((((((((.(....))))))))).....((((((.......)))))).((((((...)))))).(((((((((.(...((((..((((((.(((((((.(((((.((..(((((.(.((((.((.(((((.(((((..((.(((((((......)))....)))).))....))))).))))).)).)))).))).(((.((((((.....)))))).))))))..))..)))))))))))).)).))))..)))).))))).))).))...)))))((((...))))(((((.......))))).....................................((((((((((...((((.....))))..))))))))))..))))...))))))))........(((((((..((((((((((((((((((.(((((((((.((((((((...(((((((......(((((.((..(((((...(((.......))).)))))..)))))))..(((((((((((...)))))))...))))((((((.(((.(((..((((((((((((((((.(((((....))))))))))))).))))))))))))))..))))))......((((((((((.(((((((((.....(((((..(....)..)))))....)))))))))))))).......))))).....))))))).((((((((((...))))))))))(((((((((.(((((...))))).)))))))))(((((((((.(((....(((((.(((......))).))))).....)))......((....))...)))))))))(((.(......).))).(((((....((.(.((((.((((((((((.(.(((.(((((((.(..((.(((((.((((((((...)))))).)).)))))))..).))).))))..)))).))))))))))((((.(((..((((((........)))))).))).)))).)))).).((((((((..(((((...(((..((.(((..(((((..(((((((..((((.....))))..))).)))))))))..)))))..)))...))))...)..)))))))).))...)))))...)))))))).)))))...)).)).)))))..((((..((((((((.((((......(((.((((......(((.(((((((((((((.((((....))))....)))).))))))))).))).....((........)))))).))).(((((((((((((((.(((((.((((.((.....(((((((.((((((((((((.(((.(((((....))))).)))))))))).)))))))))))))))))).))))).........)))))))))))))))))))))))))))..).)))((((((((..((((.((((((((((.(((((.............)).))))))))))))).))))..))))..)))).....(((((.(..(((..(((..((((((((((((.(((...((((.....))))....((((.((..(((........))).)).)))).((((((((..((........))..)))....((((....)))))))))))))))))))))........((.(((((((((.(((((((((((((((((((((((...)))))...(((((.((((((((..(((((....((((.((((((((((...((((((.((((...))))))))))...)))))))))))))).......((((.((((((...((((....(((((((((.((((.....)))))))))))))..)))))))))))))).......(((.((.(((((.............)))))))))).)))))..))))))))))))).....))))...((((((((((((((((((..((.(((((((((((((........))))))....(((((.......))).)).))))).)).))(((((....)))))(((((((.((((((.....))))).).))))))).))))).))).)))))).)))).))))).)))))).....(((((..((.((((((((.(((.((((.(((.(((........))).))).)).))))).)))).)))).))..)))))(((..(((........)))..)))((((((((((((((.((((.....))))(((((..((((((.......))).))))))))))))))((((.((((((......)))))).)))).........((((((((((((((((.((((((........)))))).))..)))).((((((.....))))))..)))))))))).((((((.......)))))).(((((((.....))))))))))).))))....)))))))))))))))))..)))..)))..))))))...((.(((..((((....)))).))).)).......))))))).))))))...)))))))...(((((((((((((..((.....((.((..((((.((((((((((((((....))))))...(((((..(((((((((...(((((((((((((......))))))).))))))..((((.(((((((.((((.(((((((..((((((......(((((((((..(((((.(((.((((.(((((.(((((..(((((((((..........))))).....(((((((.((((.(((.((((....(((((...(((((((...........)))))))))))))))).)))))))..)))))))...(((((((.........)))))))..)))).)))))...))))).)))))))............((((.........................))))))))).)))))))))......))))))..)).)))))........(((((((((...))))).))))(((((((((..(((((.(((.((.((((((((.((.((..(((((((((((.......)))))))))))..)).))..)))))))).)).))).))))).................((((((((((.((((((((....))))))...)).)).))))))))....))))))))).((((((........))))))..((((....))))((.((((((.(.(((.((.((((....))).).)).)))).)))))).))..)))).))))))).))))(((....)))))))))))).....))))))))))))))))).)).))..))..))))))....))))).))..((((((.((((..(((((....(((((.........)))))....)))))....((...(((((((((.(((((((((....(((((....)))))......)))))))))..))))))).))...)))))).))))))...........))))..(((((((..((((((((((((((....(((.((......(((.((........)).)))....)).)))....))))))))))((((((((((.((((......(((((.(..((....))(((((((((((((.......)))).))).)).))))).))))).....)))).)))).))))))(((((.(((((((......))))))).(((((.((........)).)))))....(((.((((((((((((.((((((((((((((((.((((.(........).)))).)))))).)))))))))).)....))))))))))).....)))((((((((.((((...(((((.((((((...(((((.....((((.....)))).....))))).)))))).........))))).))))....(((((((.((((((.(((((....((((....)))).((((((....))))))...((((...(((.......)))..)))).......))))).)))...)))...)))))))..........((((((((((....(((((............)))))....)))))...((.(((((((((((....(((..(((((..(((((((...)))))))..))))).)))..))))))))))).)).(((((((...))))))).)))))........))))))))........((((((.(((.((.((((((((...(((((....(((..((((((((....))))))))))).))))).....))))))))..))..))))))).))........((((((.(((((((.((.(((.....((........)).....))))).))))))).)).))))(((((((((((((((((((((..........)))).....(((((((((.((((((((((.((......)).((((((((((((.....((((....))))....)))))))).((((((.(((((...........))))).))))))..(((.((((..((((((((.......(((......)))((((..((((((...((...(((.(((.....))))))...))...))))))..)).))((((.((((((((((.(((.......(((.((((((........)))))))))..((((.((((((.(((((((..((((.(((((((((.(((((.......((((.((((((((((..((((((((....))).)))))........(((((((.(((.((......))((((((((.(((((...))))).)).))))))...(((((.....)))))((((((..((((..........)))).)))))).))))))))))..)))))))(((((((.(((((((.....((.....)).....))))))........).))))))).....((((((((.(((((.(((((...((((((.(((((((.......)))))))))))))(((.(((((((.((((((..(((((......(((((.((((.(((..((((((..((((((.((.(((.((((....)))).))).)).))))))...)))))).......)))..)))).)))))...))))).........((((..((..(((.(((.(((.((((....)))))))))).)))))..)))).))).))).)))).)))))).....(((((((((..((((((....)))))))))))))))((.(((((((((...))))))))).))..((((......(((((....)))))........))))..((((((((.((.(((.(.(((.......))))))).)).)))))))).)))))((((((...((((....(((.....))).....))))...))))))..(((((.((........)).)))))(((((((((((((((((((((.(((((...(((..(((...))).)))....)).))).))).))))))))).)))))...........))))..)))))...))))))))........((....))......((.(((.......)))))...))).))))......(((((((.....((((((.............)))))).)))))))..))))).))))))))).))))..)))))))((((..((....))..))))))))))))))((((..((....))..)))).)))))))))..(((((((.....((((((((((((((((.((((((((((((.((((((((((((...))))))))))))((.((((((((((....))))..((((((.......((((((((((((((((((((((.((((..((.(((((.((.((((((...)).)))).)).)))))))..))))))))))))))))).)).)))).))).....((((((.((((((.(((((...((((..((...))..))))((.((((...)))).)).))))))))))))))).)).(((.(((.(((((.((..((((((..((.((......)).))..)))))).....)).)))))...))))))(((.((.(((((.(((((((((((((((..((.((.((((((.((((((...((..(((.((((......)))).)))..)))))))))))))))))))))))))..))))).....(((((...((((((....))))))...)))))))).))))))))))((((((((.((((..((...(((((....)).)))....(((...(((((((((.....((((((.(((((((((.((((((..(((((((......(((((((..(((((.((((((((((..(((((((.(((((.(((((.(((.(((((((((((((((............))))))).)).))).)))))).).)).)).)))))..).))))))))))))))))))))))))))))((((((((....((.......))...))))))))..))))))).)))))))))..)))))).....((((..(((((.((((.(((...((((((....))))))..((((((((....))))).))).........(((((((((((((((.....)))))(((........)))....))))))).)))(((.(((((...))).)).))).)))..)))))))))..)))).....((((.((((((((.(((...(((((((((((((......))))....))))))))).....)))....)))))))).))))((((((((.((((..(((.((.((((((.((.(((....(((((....((((...))))(((..(((((((....))))))).)))(((((.......)))))((((((...........(((.(((((((.((..((((((...(((((...))))).))))))...(((((((...(((..((((..((....))..))))......)))..)))))))..(((.(((((....))))))))))))))))).)))))))))......(((((.((.....)).))))).)))))....))).))..)))))))).)))))))((((....)))).((((((............))))))...(((((....)))))((((((....(((...(((((((((..(((((((((.(((............))))))))).........(((((.....))))).((((((((((...((((.((.((((((.((...((((.(((.(((((((((.((((((((((...((((((..((.(((((....))))).)).))))))...))).))))))).))))))))))))..))))...)).)).)))).)).)))).))))).))))).....(((((.......)))))((((.........)))).(((((((((.(((......(((.((........))((.((((((....)))))).)).((((.....))))....)))......)))))))))))).)))...))))))))).)))....)))))).....(((.(((((((..........))))))).)))))))))))...........(((((((.(((((.(((((...((((((....)))))).)))))...)))))..(((((.......((((((((....))))))))..)))))...))))))).))))))..(((((((((.((.....((((((.......))))))..)).))))))))).......(((.(((..((((......((((((((((.......(((((((((((.((...))))))))).((((((((((.((((.(((((.....((.(((((((....))))))).)).....)))))....)))).........))))))))))..))))......))))))))))(((((((((((((((..((....((((..(((((((((((....((((.(((....))).)))).(((((.....((((...))))))))).......)))))))))))(((((....)))))..)))).))..))))))).))))))))........))))...))).)))(((((((((.(((.....)))..(((((((((((...)))))))))))..)))))))))((((............))))....(((((((((.(((.(((((((((....)))))..)))).)))..))))))))).......)))))))))...)))((((((...))))))...(((((....)))))..))..)))).))))).)))..(((((((((((...)))))).)))))......(((((..((((.(.((..(.((((((.(((..((((((....)))))).....)))...))).)))).)))))))..)))))...)))))).(((((....(((((((((...)))).))))).....)))))..((((....)))))))))).))....(((((........))))).....(((((((.(((........))).)).))))).........(((........)))..((((((((((((((((((....)))).)))((((((...))))))(((((((.....((.((......)).))..)))))))))))).))))))...(((....)))(((((((((....)))))).))))))))))))))).(((((....((((......))))....))))).).)))))))))))..)).)).......)))))))....(((((((((..(......(((((((.....(((((((((...))))))))))))))))..)..)))))))))...)))))))).)))))))).)))))))(((((.(((((..((((((((((((((....)))).))).)))))))..)))))))))).))))..))))))...)))).......(((((.(((..(((((((((....)))))))))..))).)))))...((((((((((((((............))))))........))))))))((((((..(((((((((((((((.....))))))))))))))).................))))))(((((...(((((.....((((....))))....)))))...)))))....))))))))).............................................................))))))))))))))).)).....(((((........))))))))))....))))..)))))))(((((((((((((((.(((......))))))))))))).)))))";
		//String struc = "..((...((..))..((..((...)).))...))....";
		//String struc = "(((....)))(((......)))(((......))))))";
		//String struc = "(((....)))(((......)))(((......)))";
		ArrayList<Duo> structures = subdivide (struc);
		System.out.println (structures.size());
		for (Duo d : structures) {
			if (d.size()> 100) {
				System.out.println (d);
			}
		}
		/*
		ArrayList<Structure> structure = DotBracket.extract ();
		System.out.println (structure);
		for (Structure s : structure) {
			System.out.println (subdivide(s.getStructure()));
		}*/

		
	}
}
